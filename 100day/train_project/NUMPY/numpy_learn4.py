#!/usr/bin/env python
# encoding: utf-8

# @author: huhao
# @Software : PyCharm
# @file: numpy_learn4.py
# @time: 2019/6/10 15:57
# @Ducument：https://www.python.org/doc/
# @desc:

import numpy as np

nd = np.array(
    [[9, 93, 1, 61, 61], [62, 61, 41, 13, 1], [65, 70, 62, 28, 17], [86, 51, 13, 93, 55], [91, 26, 77, 9, 33]])

print(type(nd))

print(np.sin(nd))
'''
[[ 0.41211849 -0.94828214  0.84147098 -0.96611777 -0.96611777]
 [-0.7391807  -0.96611777 -0.15862267  0.42016704  0.84147098]
 [ 0.82682868  0.77389068 -0.7391807   0.27090579 -0.96139749]
 [-0.92345845  0.67022918  0.42016704 -0.94828214 -0.99975517]
 [ 0.10598751  0.76255845  0.99952016  0.41211849  0.99991186]]
'''
print(np.arcsin(0.5) / np.pi * 180)
'''
30.000000000000004
'''
print(np.exp(2))  # np.exp(2) == e**2  e = 2.718
'''
7.38905609893065
'''

nd2 = np.array([1, 2, 3, 5, 6, 7, 8, np.nan])
print(nd2)  # [ 1.  2.  3.  5.  6.  7.  8. nan]

# 1. np.sum与np.nansum的区别(np.median/np.nanmedian, np.mean/np.nanmean, np.std/np.nanstd, np.var/np.nanvar)  NaN: not a number
# 当含有非数字元素元素时，求解时忽略NAN
print(np.sum(nd2))  # nan
print(np.nansum(nd2))  # 82.0
print(np.var(nd2))  # nan
print(np.nanvar(nd2))  # 5.959183673469389

# 2.矩阵的相关性
# 矩阵a, b的相关性(value>=-1 and value<=1)
'''
        a   b
  a     1   a~b
  
  b     b~a  1  
'''
nd2[-1] = 9
print(nd2)
nd3 = nd2 + np.random.randint(1, 10, size=8)
print(np.corrcoef(nd2, nd3))

nd4 = np.array([1, 2, 3, 4, 5, 6, 7])
nd5 = np.ones(7)
nd5[::-2] = -1
print(nd5)
print(nd5.std())
print(np.corrcoef(nd4, nd5))
'''
[[1. 0.]
 [0. 1.]]
'''

# 3. 直方图
# 统计数据出现的频数
str = '325 208 218 961 835 612 488 298 356 768 827 275 918 386  60 331 911 865 48 955 872 559 621 659 270  26 546 488 440 153  33 556 164 982 191 665 974 748 238 892 989 615   8 523 119 724 670 506 298 231 372 292 662 727 242 924 854 616 667 977 610 381 641 353 560  63 800 299 656 386 146 161 358 788 821 673 881 369 788 201 441 194 664 832 630 129 785 198 879 389  279 709 418 855 264 320 130 747 422 865'
# 字符串列表转整数列表
list1 = str.split()
print(list1)
list2 = []
# 方法1：
for value in list1:
    list2.append(int(value))
# 方法2：
# list2 = list(map(int, list1))
print("list2 = ", list2)
nd6 = np.array(list2)
print("nd6 = ", nd6)
print(np.histogram(nd6, bins=10))
print(np.argwhere(nd6 <= 106.1))
"""
nd6 =  [325 208 218 961 835 612 488 298 356 768 827 275 918 386  60 331 911 865
          48 955 872 559 621 659 270  26 546 488 440 153  33 556 164 982 191 665
         974 748 238 892 989 615   8 523 119 724 670 506 298 231 372 292 662 727
         242 924 854 616 667 977 610 381 641 353 560  63 800 299 656 386 146 161
         358 788 821 673 881 369 788 201 441 194 664 832 630 129 785 198 879 389
         279 709 418 855 264 320 130 747 422 865]
(array([ 6, 11, 13, 12,  6,  6, 15,  9, 12, 10], dtype=int32),  # 6指的是8~106.1中数据的个数
 array([  8. , 106.1, 204.2, 302.3, 400.4, 498.5, 596.6, 694.7, 792.8,
       890.9, 989. ]))  # min = 8, max = 989,

"""
print(np.sort(nd6, axis=None))  # sort the flattened array
"""
[  8  26  33  48  60  63 119 129 130 146 153 161 164 191 194 198 201 208
 218 231 238 242 264 270 275 279 292 298 298 299 320 325 331 353 356 358
 369 372 381 386 386 389 418 422 440 441 488 488 506 523 546 556 559 560
 610 612 615 616 621 630 641 656 659 662 664 665 667 670 673 709 724 727
 747 748 768 785 788 788 800 821 827 832 835 854 855 865 865 872 879 881
 892 911 918 924 955 961 974 977 982 989]
"""
print(np.partition(nd6,kth=5)[:5])      # 取最小的5个数（未排序）
print(np.partition(nd6,kth=-5)[-5:])      # 取最大的5个数（未排序）

'''
[33 26  8 48 60]
[961 974 977 982 989]
'''










